extends layout

block scripts
  script(src='/javascripts/device.js')

block styles
  link(rel='stylesheet', href='/stylesheets/thingpedia-devices.css')

block page_name
  = _("Type: %s").format(schema.kind)

block content
  if schema.approved_version === null
    div.alert.alert-warning(role='alert')
      if user && user.developer_status >= 3
        if schema.kind_type === 'other'
          form(action='/thingpedia/schemas/approve/' + schema.id, method='post').form-inline
            input(type='hidden',name='_csrf',value=csrfToken)
            p.form-group= _("This type is not yet approved.")
              | &#x20;
              button(type='submit').btn.btn-success= _("Approve it")
        else
          p= _("This type belongs to a device that was not yet approved.")
      else
        p= _("This type is not yet approved for general use. You need a developer key to use it.")
  else if schema.approved_version !== schema.developer_version && user && user.developer_status >= 3
    div.alert.alert-warning(role='alert')
      if user && user.developer_status >= 3
        form(action='/thingpedia/schemas/approve/' + schema.id, method='post').form-inline
          input(type='hidden',name='_csrf',value=csrfToken)
          p.form-group= _("A newer version of this schema was submitted.")
            if schema.kind_type === 'other'
              | &#x20;
              button(type='submit').btn.btn-success= _("Approve it")
            else
              = _(" Go to the corresponding device page to approve it.")

  if !schema.translated
    div.alert.alert-info(role='alert')
      p
        = _("The translation for this type in your language is incomplete. ")
        a(href='/thingpedia/translate/by-id/' + schema.kind).btn.btn-default= _("Contribute translation")

  if schema.kind === 'data-source'
    p= _("This type is just a marker that indicates a publicly available web service, such as Bing or Xkcd.")

  if schema.kind === 'online-account'
    p= _("This type is a marker that denotes an account, as opposed to a physical device.")

  if schema.kind === 'communication'
    p= _("This type is a category marker for Communication services, such as texting or email.")

  if schema.kind === 'data-management'
    p= _("This type is a category marker for Data Management and Data Storage accounts, such as Dropbox and Google Drive.")

  if schema.kind === 'health'
    p= _("This type is a category marker for Health and Fitness devices, like FitBit and Jawbone UP.")

  if schema.kind === 'home'
    p= _("This type is a category marker for Home IoT devices, such as Philips Hue lightbulbs or the LG Smart TV.")

  if schema.kind === 'media'
    p= _("This type is a category marker for Mass Media and content aggregators, such as RSS, YouTube or newspapers.")

  if schema.kind === 'social-network'
    p= _("This type is a category marker for Social Network accounts, like Facebook or Twitter.")

  if schema.kind === 'service'
    p= _("This type is a category marker for generic services that don't fit in any other category, like Uber, eBay or the weather.")

  if schema.kind === 'thingengine-system'
    p= _("This type is a category marker for special pseudo-devices that are created and managed by the ThingSystem, and are invisible to the user.")

  if schema.kind.startsWith('bluetooth-uuid-') || schema.kind.startsWith('upnp-')
    p
      = _("This type is a marker for discovery. ")
      = _("It is used by a device to indicate a certain low-level capability, and has no triggers or actions of its own. ")
      != _("Most likely, you will find this type toghether with another more generic type, eg. <i>bluetooth-uuid-0000110b-0000-1000-8000-00805f9b34fb</i>, indicating the A2DP Speaker capability, would be accompanied by <i>speaker</i>.")

  if schema.kind_type === 'global'
    p
      = _("This type belongs to a specific device, which can be configured and manipulated by recalling the type by name.")

  if user && user.developer_org !== null
    h2.device-subtitle#device-version
      if schema.approved_version === null
        = _("Version: none (approved), %d (developer)").format(schema.developer_version)
      else if schema.approved_version !== schema.developer_version
        = _("Version: %d (approved), %d (developer)").format(schema.approved_version, schema.developer_version)
      else
        = _("Version: %d").format(schema.approved_version)

  mixin invocation(inv, name)
    li
      code #{name}(#{inv.args.map(function(p, i) { return p + ' : ' + inv.schema[i]; }).join(', ')})
      if inv.doc
        | : #{inv.doc}
      br
      = _("Canonical: ")
      span.canonical= inv.canonical
      br
      = _("Local Confirmation: ")
      span.confirmation= inv.confirmation
      br
      = _("Remote Confirmation: ")
      span.confirmation_remote= inv.confirmation_remote

  if Object.keys(triggers).length > 0
    h2.device-subtitle= _("Triggers")
    ul.device-channels
      for t, name in triggers
        +invocation(t, name)

  if Object.keys(queries).length > 0
    h2.device-subtitle= _("Queries")
    ul.device-channels
      for q, name in queries
        +invocation(q, name)

  if Object.keys(actions).length > 0
    h2.device-subtitle= _("Actions")
    ul.device-channels
      for a, name in actions
        +invocation(a, name)

  h2.device-subtitle= _("Example Commands")
  if schema.examples.length > 0
    ul.device-examples
      for e in schema.examples
        li
          if authenticated && user.developer_status >= 3
            span(title=e.target_json)= e.utterance
          else
            span= e.utterance
          if authenticated
            | &#x20;
            a(href='#',data-example-id=e.id,data-csrfToken=csrfToken).upvote-btn
              span.glyphicon.glyphicon-thumbs-up(aria-hidden='true')
              span.sr-only= _("Upvote")
            | &#x20;
            a(href='#',data-example-id=e.id,data-csrfToken=csrfToken).downvote-btn
              span.glyphicon.glyphicon-thumbs-down(aria-hidden='true')
              span.sr-only= _("Downvote")
          if authenticated && user.developer_status >= 3 && e.type !== 'thingpedia'
            | &#x20;
            if e.click_count < 0
              = _("Hidden")
            else
              a(href='#',data-example-id=e.id,data-csrfToken=csrfToken).hide-example-btn
                = _("Hide")
            | &#x20;
            a(href='#',data-example-id=e.id,data-csrfToken=csrfToken).delete-example-btn
              = _("Delete")
  else
    p#no-commands= _("This type has no commands.")

  div.row#device-details-actions
    if schema.kind_type === 'other' && authenticated && (user.developer_status >= 3 || schema.owner === user.developer_org)
      div.col-md-2
        a.btn.btn-warning.btn-block(href='/thingpedia/schemas/update/' + schema.id)= _("Edit")
      div.col-md-2
        form(action='/thingpedia/schemas/delete/' + schema.id, method='post').form-delete-device
          input(type='hidden',name='_csrf',value=csrfToken)
          button(type='submit').btn.btn-danger.btn-block= _("Delete")
    if authenticated && user.locale !== 'en-US' && schema.kind_type !== 'primary'
      div.col-md-2
        a.btn.btn-default.btn-block(href='/thingpedia/translate/by-id/' + schema.kind)= _("Translate")
