extends layout

block styles
  link(rel='stylesheet', href='/stylesheets/thingpedia-devices.css')

block page_name
  = _("Type: %s").format(schema.kind)

block content
  if schema.approved_version === null
    div.alert.alert-warning(role='alert')
      if user && user.developer_status >= 3
        if schema.kind_type === 'other'
          form(action='/thingpedia/schemas/approve/' + schema.id, method='post').form-inline
            input(type='hidden',name='_csrf',value=csrfToken)
            p.form-group= _("This type is not yet approved.")
              | &#x20;
              button(type='submit').btn.btn-success= _("Approve it")
        else
          p= _("This type belongs to a device that was not yet approved.")
      else
        p= _("This type is not yet approved for general use. You need a developer key to use it.")
  else if schema.approved_version !== schema.developer_version && user && user.developer_status >= 3
    div.alert.alert-warning(role='alert')
      if user && user.developer_status >= 3
        form(action='/thingpedia/schemas/approve/' + schema.id, method='post').form-inline
          input(type='hidden',name='_csrf',value=csrfToken)
          p.form-group= _("A newer version of this schema was submitted.")
            if schema.kind_type === 'other'
              | &#x20;
              button(type='submit').btn.btn-success= _("Approve it")
            else
              = _(" Go to the corresponding device page to approve it.")

  if !schema.translated
    div.alert.alert-info(role='alert')
      p
        = _("The translation for this type in your language is incomplete. ")
        a(href='/thingpedia/translate/by-id/' + schema.kind).btn.btn-default= _("Contribute translation")

  if schema.kind === 'data-source'
    p= _("This type is just a marker that indicates a publicly available web service, such as Bing or Xkcd.")

  if schema.kind === 'online-account'
    p= _("This type is a marker that denotes an account, as opposed to a physical device.")

  if schema.kind.startsWith('bluetooth-uuid-')
    p
      = _("This type is a marker for discovery. ")
      = _("It is used by a device to indicate a certain low-level capability, and has no triggers or actions of its own. ")
      != _("Most likely, you will find this type toghether with another more generic type, eg. <i>bluetooth-uuid-0000110b-0000-1000-8000-00805f9b34fb</i>, indicating the A2DP Speaker capability, would be accompanied by <i>speaker</i>.")

  if schema.kind_type === 'global'
    p
      = _("This type belongs to a specific device, which can be configured and manipulated by recalling the type by name.")

  if user && user.developer_org !== null
    h2.device-subtitle#device-version
      if device.approved_version === null
        = _("Version: none (approved), %d (developer)").format(device.developer_version)
      else if device.approved_version !== device.developer_version
        = _("Version: %d (approved), %d (developer)").format(device.approved_version, device.developer_version)
      else
        = _("Version: %d").format(device.approved_version)

  if Object.keys(triggers).length > 0
    h2.device-subtitle= _("Triggers")
    ul.device-channels
      for t, name in triggers
        li
          code #{name}(#{t.args.map(function(p, i) { return p + ' : ' + t.schema[i]; }).join(', ')})
          if t.doc
            | : #{t.doc}
          br
          = _("Canonical: ")
          span.canonical= t.canonical

  if Object.keys(queries).length > 0
    h2.device-subtitle= _("Queries")
    ul.device-channels
      for q, name in queries
        li
          code #{name}(#{q.args.map(function(p, i) { return p + ' : ' + q.schema[i]; }).join(', ')})
          if q.doc
            | : #{q.doc}
          br
          = _("Canonical: ")
          span.canonical= q.canonical

  if Object.keys(actions).length > 0
    h2.device-subtitle= _("Actions")
    ul.device-channels
      for a, name in actions
        li
          code #{name}(#{a.args.map(function(p, i) { return p + ' : ' + a.schema[i]; }).join(', ')})
          if a.doc
            | : #{a.doc}
          br
          = _("Canonical: ")
          span.canonical= a.canonical

  h2.device-subtitle= _("Example Commands")
  if schema.examples.length > 0
    ul.device-examples
      for e in schema.examples
        li= e.utterance
  else
    p#no-commands= _("This type has no commands.")

  div.row#device-details-actions
    if schema.kind_type === 'other' && authenticated && (user.developer_status >= 3 || schema.owner === user.developer_org)
      div.col-md-2
        a.btn.btn-warning.btn-block(href='/thingpedia/schemas/update/' + schema.id)= _("Edit")
      div.col-md-2
        form(action='/thingpedia/schemas/delete/' + schema.id, method='post').form-delete-device
          input(type='hidden',name='_csrf',value=csrfToken)
          button(type='submit').btn.btn-danger.btn-block= _("Delete")
    if authenticated && user.locale !== 'en-US' && schema.kind_type !== 'primary'
      div.col-md-2
        a.btn.btn-default.btn-block(href='/thingpedia/translate/by-id/' + schema.kind)= _("Translate")
